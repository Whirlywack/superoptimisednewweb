generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  login                  String?
  role                   UserRole                @default(user)
  isAdmin                Boolean                 @default(false)
  accounts               Account[]
  sessions               Session[]
  engagementStats        EngagementStats?
  posts                  Post[]
  questionResponses      QuestionResponse[]
  questionnaireResponses QuestionnaireResponse[]
  xpLedger               XpLedger[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VoterToken {
  id                     String                  @id @default(cuid())
  tokenHash              String                  @unique @map("token_hash")
  createdAt              DateTime                @default(now()) @map("created_at")
  lastActive             DateTime                @default(now()) @map("last_active")
  ipAddress              String?                 @map("ip_address")
  voteCount              Int                     @default(0) @map("vote_count")
  engagementStats        EngagementStats?
  questionResponses      QuestionResponse[]
  questionnaireResponses QuestionnaireResponse[]
  xpClaims               XpClaim[]
  xpLedger               XpLedger[]

  @@map("voter_tokens")
}

model Questionnaire {
  id          String                  @id @default(cuid())
  title       String
  description String?
  category    String?
  status      String                  @default("draft")
  startDate   DateTime?               @map("start_date")
  endDate     DateTime?               @map("end_date")
  settings    Json                    @default("{}")
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  questions   QuestionnaireQuestion[]
  responses   QuestionnaireResponse[]

  @@map("questionnaires")
}

model QuestionnaireQuestion {
  id              String        @id @default(cuid())
  questionnaireId String        @map("questionnaire_id")
  questionId      String        @map("question_id")
  displayOrder    Int           @map("display_order")
  isRequired      Boolean       @default(true) @map("is_required")
  createdAt       DateTime      @default(now()) @map("created_at")
  question        Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@unique([questionnaireId, questionId])
  @@map("questionnaire_questions")
}

model Question {
  id                     String                  @id @default(cuid())
  title                  String
  description            String?
  questionType           String                  @map("question_type")
  questionData           Json                    @map("question_data")
  category               String?
  isActive               Boolean                 @default(true) @map("is_active")
  startDate              DateTime?               @map("start_date")
  endDate                DateTime?               @map("end_date")
  displayOrder           Int                     @default(0) @map("display_order")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  responses              QuestionResponse[]
  questionnaireQuestions QuestionnaireQuestion[]
  xpLedger               XpLedger[]

  @@map("questions")
}

model QuestionnaireResponse {
  id                String             @id @default(cuid())
  questionnaireId   String             @map("questionnaire_id")
  voterTokenId      String?            @map("voter_token_id")
  userId            String?            @map("user_id")
  status            String             @default("in_progress")
  startedAt         DateTime           @default(now()) @map("started_at")
  completedAt       DateTime?          @map("completed_at")
  ipAddress         String?            @map("ip_address")
  userAgent         String?            @map("user_agent")
  questionResponses QuestionResponse[]
  questionnaire     Questionnaire      @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  user              User?              @relation(fields: [userId], references: [id])
  voterToken        VoterToken?        @relation(fields: [voterTokenId], references: [id])

  @@map("questionnaire_responses")
}

model QuestionResponse {
  id                      String                 @id @default(cuid())
  questionId              String                 @map("question_id")
  voterTokenId            String?                @map("voter_token_id")
  userId                  String?                @map("user_id")
  responseData            Json                   @map("response_data")
  ipAddress               String?                @map("ip_address")
  userAgent               String?                @map("user_agent")
  createdAt               DateTime               @default(now()) @map("created_at")
  questionnaireResponseId String?                @map("questionnaire_response_id")
  question                Question               @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionnaireResponse   QuestionnaireResponse? @relation(fields: [questionnaireResponseId], references: [id])
  user                    User?                  @relation(fields: [userId], references: [id])
  voterToken              VoterToken?            @relation(fields: [voterTokenId], references: [id])

  @@map("question_responses")
}

model XpLedger {
  id               String      @id @default(cuid())
  voterTokenId     String?     @map("voter_token_id")
  userId           String?     @map("user_id")
  actionType       String      @map("action_type")
  xpAmount         Int         @map("xp_amount")
  sourceQuestionId String?     @map("source_question_id")
  createdAt        DateTime    @default(now()) @map("created_at")
  sourceQuestion   Question?   @relation(fields: [sourceQuestionId], references: [id])
  user             User?       @relation(fields: [userId], references: [id])
  voterToken       VoterToken? @relation(fields: [voterTokenId], references: [id])

  @@map("xp_ledger")
}

model EngagementStats {
  id            String      @id @default(cuid())
  voterTokenId  String?     @unique @map("voter_token_id")
  userId        String?     @unique @map("user_id")
  currentStreak Int         @default(0) @map("current_streak")
  longestStreak Int         @default(0) @map("longest_streak")
  totalVotes    Int         @default(0) @map("total_votes")
  totalXp       Int         @default(0) @map("total_xp")
  lastActivity  DateTime    @default(now()) @map("last_activity")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User?       @relation(fields: [userId], references: [id])
  voterToken    VoterToken? @relation(fields: [voterTokenId], references: [id])

  @@map("engagement_stats")
}

model Post {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String?
  content     String
  postType    String    @map("post_type")
  status      String    @default("draft")
  featured    Boolean   @default(false)
  authorId    String?   @map("author_id")
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  author      User?     @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model ContentBlock {
  id          String           @id @default(cuid())
  pageKey     String           @map("page_key")
  blockKey    String           @map("block_key")
  contentType String           @map("content_type")
  content     String
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  version     Int              @default(1)
  versions    ContentVersion[]

  @@unique([pageKey, blockKey])
  @@map("content_blocks")
}

model ContentVersion {
  id             String       @id @default(cuid())
  contentBlockId String       @map("content_block_id")
  version        Int
  content        String
  contentType    String       @map("content_type")
  changeReason   String?      @map("change_reason")
  createdAt      DateTime     @default(now()) @map("created_at")
  createdBy      String?      @map("created_by")
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  @@unique([contentBlockId, version])
  @@map("content_versions")
}

model ProjectStat {
  id          String   @id @default(cuid())
  statKey     String   @unique @map("stat_key")
  statValue   String   @map("stat_value")
  description String?
  lastUpdated DateTime @default(now()) @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("project_stats")
}

model NewsletterSubscriber {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  sourcePage        String?   @map("source_page")
  preferences       Json      @default("{}")
  status            String    @default("pending")
  verificationToken String?   @map("verification_token")
  confirmedAt       DateTime? @map("confirmed_at")
  unsubscribedAt    DateTime? @map("unsubscribed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("newsletter_subscribers")
}

model AnalyticsDaily {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalVotes        Int      @default(0) @map("total_votes")
  uniqueVoters      Int      @default(0) @map("unique_voters")
  totalXpEarned     Int      @default(0) @map("total_xp_earned")
  newsletterSignups Int      @default(0) @map("newsletter_signups")
  popularQuestions  Json     @default("[]") @map("popular_questions")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("analytics_daily")
}

model LiveStat {
  id          String   @id @default(cuid())
  statKey     String   @unique @map("stat_key")
  statValue   Int      @map("stat_value")
  lastUpdated DateTime @default(now()) @map("last_updated")

  @@map("live_stats")
}

model XpClaim {
  id           String     @id @default(cuid())
  voterTokenId String     @map("voter_token_id")
  email        String
  claimToken   String     @unique @map("claim_token")
  totalXp      Int        @map("total_xp")
  status       String     @default("pending")
  expiresAt    DateTime   @map("expires_at")
  claimedAt    DateTime?  @map("claimed_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  voterToken   VoterToken @relation(fields: [voterTokenId], references: [id], onDelete: Cascade)

  @@map("xp_claims")
}

model RateLimit {
  id           String   @id @default(cuid())
  ipAddress    String   @map("ip_address")
  actionType   String   @map("action_type")
  requestCount Int      @default(1) @map("request_count")
  windowStart  DateTime @default(now()) @map("window_start")
  expiresAt    DateTime @map("expires_at")

  @@unique([ipAddress, actionType])
  @@map("rate_limits")
}

enum UserRole {
  user
  admin
}
